/* Generated by GOB (v2.0.16)   (do not edit directly) */


/* Copyright 2009 (c) ENSI de Bourges
 * 		88 boulevard Lahitolle, 18020 Bourges Cedex, France
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Written by Steve Dodier <sidnioulz@gmail.com>
 *
 * This file is an auto-generated GObject used in private functions for
 * Synema frames.
 */

#include <glib.h>
#include <glib-object.h>
#ifndef __FRAME_SIGNALS_H__
#define __FRAME_SIGNALS_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define FRAME_TYPE_SIGNALS	(frame_signals_get_type())
#define FRAME_SIGNALS(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), frame_signals_get_type(), Framesignals)
#define FRAME_SIGNALS_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), frame_signals_get_type(), Framesignals const)
#define FRAME_SIGNALS_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), frame_signals_get_type(), FramesignalsClass)
#define FRAME_IS_SIGNALS(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), frame_signals_get_type ())

#define FRAME_SIGNALS_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), frame_signals_get_type(), FramesignalsClass)

/*
 * Main object structure
 */
#ifndef __TYPEDEF_FRAME_SIGNALS__
#define __TYPEDEF_FRAME_SIGNALS__
typedef struct _Framesignals Framesignals;
#endif
struct _Framesignals {
	GObject __parent__;
};

/*
 * Class definition
 */
typedef struct _FramesignalsClass FramesignalsClass;
struct _FramesignalsClass {
	GObjectClass __parent__;
	/*signal*/void (* spinner_stop) (Framesignals * self, gpointer data);
	/*signal*/void (* spinner_start) (Framesignals * self, gpointer data);
};


/*
 * Public methods
 */
GType	frame_signals_get_type	(void) G_GNUC_CONST;
void 	frame_signals_spinner_stop	(Framesignals * self,
					gpointer data);
void 	frame_signals_spinner_start	(Framesignals * self,
					gpointer data);
GObject * 	frame_signals_new	(void);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define frame_signals_connect__spinner_stop(object,func,data)	g_signal_connect(FRAME_SIGNALS(__extension__ ({Framesignals *___object = (object); ___object; })),"spinner_stop",(GCallback) __extension__ ({void (* ___spinner_stop) (Framesignals * ___fake___self, gpointer ___fake___data, gpointer ___data ) = (func); ___spinner_stop; }), (data))
#define frame_signals_connect_after__spinner_stop(object,func,data)	g_signal_connect_after(FRAME_SIGNALS(__extension__ ({Framesignals *___object = (object); ___object; })),"spinner_stop",(GCallback) __extension__ ({void (* ___spinner_stop) (Framesignals * ___fake___self, gpointer ___fake___data, gpointer ___data ) = (func); ___spinner_stop; }), (data))
#define frame_signals_connect_data__spinner_stop(object,func,data,destroy_data,flags)	g_signal_connect_data(FRAME_SIGNALS(__extension__ ({Framesignals *___object = (object); ___object; })),"spinner_stop",(GCallback) __extension__ ({void (* ___spinner_stop) (Framesignals * ___fake___self, gpointer ___fake___data, gpointer ___data ) = (func); ___spinner_stop; }), (data), (destroy_data), (GConnectFlags)(flags))
#define frame_signals_connect__spinner_start(object,func,data)	g_signal_connect(FRAME_SIGNALS(__extension__ ({Framesignals *___object = (object); ___object; })),"spinner_start",(GCallback) __extension__ ({void (* ___spinner_start) (Framesignals * ___fake___self, gpointer ___fake___data, gpointer ___data ) = (func); ___spinner_start; }), (data))
#define frame_signals_connect_after__spinner_start(object,func,data)	g_signal_connect_after(FRAME_SIGNALS(__extension__ ({Framesignals *___object = (object); ___object; })),"spinner_start",(GCallback) __extension__ ({void (* ___spinner_start) (Framesignals * ___fake___self, gpointer ___fake___data, gpointer ___data ) = (func); ___spinner_start; }), (data))
#define frame_signals_connect_data__spinner_start(object,func,data,destroy_data,flags)	g_signal_connect_data(FRAME_SIGNALS(__extension__ ({Framesignals *___object = (object); ___object; })),"spinner_start",(GCallback) __extension__ ({void (* ___spinner_start) (Framesignals * ___fake___self, gpointer ___fake___data, gpointer ___data ) = (func); ___spinner_start; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define frame_signals_connect__spinner_stop(object,func,data)	g_signal_connect(FRAME_SIGNALS(object),"spinner_stop",(GCallback)(func),(data))
#define frame_signals_connect_after__spinner_stop(object,func,data)	g_signal_connect_after(FRAME_SIGNALS(object),"spinner_stop",(GCallback)(func),(data))
#define frame_signals_connect_data__spinner_stop(object,func,data,destroy_data,flags)	g_signal_connect_data(FRAME_SIGNALS(object),"spinner_stop",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define frame_signals_connect__spinner_start(object,func,data)	g_signal_connect(FRAME_SIGNALS(object),"spinner_start",(GCallback)(func),(data))
#define frame_signals_connect_after__spinner_start(object,func,data)	g_signal_connect_after(FRAME_SIGNALS(object),"spinner_start",(GCallback)(func),(data))
#define frame_signals_connect_data__spinner_start(object,func,data,destroy_data,flags)	g_signal_connect_data(FRAME_SIGNALS(object),"spinner_start",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
